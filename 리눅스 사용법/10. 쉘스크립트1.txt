1. [쉘 스크립트]
	- 리눅스 작업을 편리하고 효율적으로 하기 위한 용도
	- 쉘을 통하여 프로그램을 만드는 것
	- DOS의 batch 파일 작성과 비슷하지만 더 막강한 기능들을 가지고 있다.

2. 스크립트 작성
	- vi [스크립트명].sh
	- 스크립트 파일의 가장 위의 첫 라인은 #! /bin/bash로 시작
	- bash로 작성되어있다는 것을 의미
	- Bourne Shell 인 경우 #! /bin/sh
	
3. 스크립트 실행
	#> [스크립트 경로]
	#> bash [스크립트 경로]
	#> .스크립트 경로
		- 실행하기 위해서는 실행권한 필요 chmod로 실행권한 추가.

4. 변수
	[변수이름] = [데이터]
	- 대소문자 구분 
	- 숫자형 변수와 문자형 변수의 구별이 없다. 
	- 변수 사용은 $변수명으로 사용
	- 등호(=) 사이의 좌우 공백이 없어야 한다.
	
	[인수들] 
	$0		: 쉘 스크립트 이름
	$1, 2, ..	: args
	$* 		: 모든 args
	$#		: args의 개수
	

5. 출력
	#> echo [옵션] [인자] 			
		-n	: new line 제외 (개행x)
		-e	: 이스케이프문자 사용 (\n,\t,\b,\c)
		

6. 입력
	#> read [옵션] [변수명]
		-p [문자열] [변수명]
			> 입력받기 전 문자열 출력 후 입력한 값을 변수에 대입

7. 연산자
	#> expr	[num] [calc] [num]
		- expr로 변수에 대입하려면 역따옴표(`)를 사용

8. 제어문
	1) 조건문(if문)

	if '[' 조건식 ']'
	then
		command (조건문이 참일때 수행하고자하는 명령)
	elif '[' 조건식 ']'
	then
		command
	else
		command
	fi

[조건식]
1. 파일
	[ -e <path> ] 	: 파일이 존재
	[ ! -e <path> ]	: 파일이 없을때 [참]
	[ -f <path> ]	: 파일이 존재하고 일반 파일인 경우
	[ -d <path> ]	: 파일이 존재하고 디렉토리인 경우
	
2.문자열
	[$str1 == $str2]		:str1값과 str2값이 같다면
	[$str1 != $str2]	:str1값과 str2값이 다르다면
	
3.정수
	[$x -gt $y]	: x값이 y값보다 크다면(>)
	[$x -ge $y]	: x값이 y값보다 크거나 같다면(>=)
	[$x -lt $y]	: x값이 y값보다 작다면(<)
	[$x -le $y]	: x값이 y값보다 작거나 같다면(<)
	[$x -eq $y]	: x값이 y값이 같다면(==)
	[$x -ne $y]	: x값이 y값과 다르다면(!=)


	2) 조건문 (case문)

	case [변수] in
	value )
		변수의 값이 value일 경우 수행하고자 하는 명령;;
	value ) 
		변수의 값이 value일 경우 수행하고자 하는 명령;;
	* )
		거짓일 경우 수행하고자 하는 명령;;
	esac


	3) 반복문 (for 문)
	
	- 방법 1.
	for [변수이름] in [value1] [value2] [value3] ...
	do		
		command
	done
	
	- 방법 2.
	for((초기식;조건식;증감식))
	do
		command
	done


	4) 반복문 (while문)

	while [조건식]
	do	
		command
	done
	
문제1) while문과 case문을 이용하여 다음과 같은 스크립트 구현 (무한 반복, q를 입력했을 때 종료)
	q를 입력했을 때 "end" 문구 출력 후 종료 
	
	[결과]
	1. list		: ls
	2. location	: pwd
	3. time		: date 
	menu choice(1 ~ 3, q) : 1
	


		
		
		
			
		
		
	













